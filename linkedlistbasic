
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None


class LinkedList:
    def __init__(self):
        self.head = None

    def insert_at_begining(self,data):
        if self.head is None:
            new_node = Node(data)
            new_node.next = self.head
            self.head = new_node
        else:
            new_node = Node(data)
            new_node.next = self.head
            self.head = new_node

    def insert_at_end(self,data):
        new_node = Node(data)
        if self.head is None:
            self.head = new_node
            return
        last_node = self.head
        while last_node.next is not None:
            last_node = last_node.next
        last_node.next = new_node

    def insert_at_any(self, data, position):
        if position < 0:
            print("Invalid position")
            return
        new_node = Node(data)

        if position == 0:
            new_node.next = self.head
            self.head = new_node
            return
        else:
            current = self.head
            for _ in range(position-1):
                if current is None:
                    raise IndexError("Position out of bounds")
                current = current.next

            new_node.next = current.next
            current.next = new_node

    def insert_after_specific_data(self, data, target_value):
        new_node = Node(data)

        current = self.head
        while current:
            if current.data == target_value:
                new_node.next = current.next
                current.next = new_node
                break
            current = current.next
        else:
            print(f"Value {target_value} not found in the linked list")

    def insert_before_node(self,target_value, data):
        new_node = Node(data)

        if self.head and self.head.data == target_value:
            new_node.next = self.head
            self.head = new_node
            return

        current = self.head
        while current and current.next:
            if current.next.data == target_value:
                new_node.next = current.next
                current.next = new_node
                break
            current = current.next
        else:
            print(f"Node with value {target_value} not found.")






    def display(self):
        current = self.head
        while current:
            print(current.data, end= "->")
            current = current.next
        print("None")

if __name__ == "__main__":
    l1  = LinkedList()
    l1.insert_at_begining(5)
    l1.insert_at_begining(7)
    l1.insert_at_begining(9)
    l1.insert_at_end(10)
    l1.insert_at_any(76,2)
    l1.insert_after_specific_data(99,7)

    l1.display()
